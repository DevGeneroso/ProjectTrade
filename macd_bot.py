# -*- coding: utf-8 -*-
"""MACD-BOT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZtdA79RBwEJEcQAk4X1H9-bsyEM0tpSO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import files
arquivo = files.upload()

df =pd.read_csv('all_bovespa.csv', delimiter=',')

df_CAIXA= df[df['sigla_acao']== 'CXSE3']

df_CAIXA.dtypes

df_CAIXA['data_pregao']=pd.to_datetime(df_CAIXA['data_pregao'],format='%Y-%m-%d')

df_CAIXA.dtypes

df_CAIXA_2023=df_CAIXA[df_CAIXA['data_pregao']>='2023-01-01']
df_CAIXA_2023

df_CAIXA_2023=df_CAIXA_2023.set_index(pd.DatetimeIndex(df_CAIXA_2023['data_pregao'].values))
df_CAIXA_2023

rapidaMME=df_CAIXA_2023.preco_fechamento.ewm(span=12).mean()
lentaMME=df_CAIXA_2023.preco_fechamento.ewm(span=26).mean()
MACD=rapidaMME - lentaMME
sinal=MACD.ewm(span=9).mean()

plt.figure(figsize=(15,5))
plt.plot(df_CAIXA_2023.index, MACD , label = 'Caixa', color='blue')
plt.plot(df_CAIXA_2023.index, sinal , label = 'sinal', color='orange')
plt.xticks(rotation=90)
plt.legend(loc='upper right')
plt.show()

df_CAIXA_2023['MACD'] = MACD
df_CAIXA_2023['sinal'] = sinal
df_CAIXA_2023

import plotly.graph_objects as go
import plotly.io as pio
from plotly.subplots import make_subplots

minimo=min([min(df_CAIXA_2023['sinal']),min(df_CAIXA_2023['MACD'])])
maximo=max([max(df_CAIXA_2023['sinal']),max(df_CAIXA_2023['MACD'])])



fig = make_subplots(vertical_spacing = 0, rows=2, cols=1, row_heights=[4,3])

fig.add_trace(go.Candlestick(x=df_CAIXA_2023.index, open= df_CAIXA_2023['preco_abertura'], high=df_CAIXA_2023['preco_maximo'],
                          low=df_CAIXA_2023['preco_minimo'], close= df_CAIXA_2023['preco_fechamento']))


fig.add_trace(go.Scatter(x=df_CAIXA_2023.index, y = df_CAIXA_2023['MACD'], name='MACD', line = dict(color='blue')), row=2, col=1)
fig.add_trace(go.Scatter(x=df_CAIXA_2023.index, y = df_CAIXA_2023['sinal'], name='Sinal', line = dict(color='yellow')), row=2, col=1)



fig.update_layout(xaxis_rangeslider_visible=False,
                  xaxis=dict(zerolinecolor='black', showticklabels=False),
                  xaxis2=dict(showticklabels=False))
fig['layout']['yaxis2'].update(range=[minimo,maximo])

fig.update_xaxes(showline=True, linewidth=1, linecolor='black', mirror=False)
fig.show()

import yfinance as yf
import pandas as pd

#Escolher um ativo

acao = yf.Ticker('CXSE3.SA')

#Escolher intervalo de dados
acao_dia = acao.history(period='1d', interval='5m')
acao_dia

#Pegar preço de fechamento
acao_dia = acao_dia.Close
acao_dia

#Transforma em dataFrame
df_acao_dia = pd.DataFrame(
acao_dia)
acao_dia

#Reset Index
df_acao_dia.reset_index(inplace=True)

#pegar uktimo valor negociado
acao_dia_ultimo_preco = df_acao_dia.tail(1)

#renomear as colunas
acao_dia_ultimo_preco.rename(columns={'Datetime':'data_pregao', 'Close': 'preco_fechamento'}, inplace=True)

acao_dia_ultimo_preco

#pegar info historicas
df_acao = df[df['sigla_acao']=='CXSE3']
df_acao = df_acao[['data_pregao','preco_fechamento']]
df_acao

df_acao['data_pregao']=pd.to_datetime(df_acao['data_pregao'],format='%Y-%m-%d')

#remove a ultima data
df_remove = df_acao.loc[(df_acao['data_pregao']== pd.to_datetime('today').normalize())]
df_acao = df_acao.drop(df_remove.index)
df_acao

#append data atual
df_acao_total = df_acao.append(acao_dia_ultimo_preco)
df_acao_total

#ajustar data
df_acao_total['data_pregao']=pd.to_datetime(df_acao_total['data_pregao'], utc=True).dt.date
df_acao_total

#calculo do macd

rapidaMME=df_acao_total.preco_fechamento.ewm(span=12).mean()
lentaMME=df_acao_total.preco_fechamento.ewm(span=26).mean()
MACD= rapidaMME - lentaMME
sinal=MACD.ewm(span=9).mean()

df_acao_total['MACD'] = MACD
df_acao_total['sinal'] = sinal
df_acao_total

#ajuste index e retira data pregao

df_acao_total = df_acao_total.set_index(pd.DatetimeIndex(df_acao_total['data_pregao'].values))
df_acao_total = df_acao_total.drop('data_pregao', 1)
df_acao_total

import numpy as np

df_acao_total['flag'] = ''
df_acao_total['preco_compra'] = np.nan
df_acao_total['preco_venda'] = np.nan

for i in range(1, len(df_acao_total.sinal)):
    if df_acao_total['MACD'][i] > df_acao_total['sinal'][i]:
        if df_acao_total['flag'][i-1] == 'C':
            df_acao_total['flag'][i] = 'C'
        else:
            df_acao_total['flag'][i] = 'C'
            df_acao_total['preco_compra'][i] = df_acao_total['preco_fechamento'][i]

    elif df_acao_total['MACD'][i] < df_acao_total['sinal'][i]:
        if df_acao_total['flag'][i-1] == 'V':
            df_acao_total['flag'][i] = 'V'
        else:
            df_acao_total['flag'][i] = 'V'
            df_acao_total['preco_venda'][i] = df_acao_total['preco_fechamento'][i]

df_acao_total

import plotly.graph_objects as goi
import plotly.io as pio
from plotly.subplots import make_subplots

df_plot = df_acao_total

fig = go.Figure()

fig.add_trace(go.Scatter(x=df_plot.index,
                        y=df_plot['preco_fechamento'],
                        name='Preco fechamento',
                        line_color='#FECB52'
                        ))
fig.add_trace(go.Scatter(x=df_plot.index,
                        y=df_plot['preco_compra'],
                        name='Compra',
                        mode='markers',
                        marker=dict(
                              color='#00CC96',
                              size=10,
                              )
                        ))
fig.add_trace(go.Scatter(x=df_plot.index,
                         y=df_plot['preco_venda'],
                         name='Venda',
                         mode='markers',
                         marker=dict(
                             color='#EF553B',
                             size=10,
                             )
                         ))
fig.show()

#pip install  python-telegram-bot

import telegram
import asyncio


my_token = '6596599865:AAGXJ0WIhVUZ5oWVYhtn1DCl5DF9DZdEQes'
chat_id = '-4087539697'

async def envia_mensagem(msg, chat_id, token=my_token):
    bot = telegram.Bot(token=token)
    await bot.send_message(chat_id=chat_id, text=msg)

hoje = df_acao_total.flag[-1]
ontem = df_acao_total.flag[-2]
flag = hoje

preco_fechamento = round(df_acao_total.preco_fechamento.tail(1)[-1],2)
msg = f'CXSE3 (Caixa Seguridade), {flag} preço de fechamento : {preco_fechamento}'

print(msg)

if ontem != hoje:
    asyncio.create_task(envia_mensagem(msg, chat_id, my_token))